#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MetisQgisApp
                                 A QGIS plugin
 Metis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-01
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Raize - Joel PINHO
        email                : raizetvision@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from cmath import phase
import json
from pyexpat import features
import time
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant, QEventLoop, QTimer, Qt, QSize
from qgis.PyQt.QtGui import QIcon, QColor, QFont, QPalette, QTextCursor, QImage, QPixmap, QCursor
from qgis.PyQt.QtWidgets import QAction, QStyleOptionGraphicsItem, QTableWidgetItem, QGraphicsView, QStyleFactory
from qgis.core import (
    QgsProject, 
    QgsVectorLayer,
    QgsField,
    QgsFeature,
    QgsMessageLog,
)
from qgis.gui import (
    QgsMessageBar,
    QgsMessageBarItem,
)
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ui.metis_qgis_app_dialog import (
    MetisQgisAppDialog,
    MetisQgisApdgcDialog,
    MetisQgisLayersDialog,
    MetisQgisDoeDialog,
    )

from .core.layout import (
    MetisLayout,
)
from .core.conts import (
    AUTHOR,
    AUTHOR_USER,
    VERSION,
    GISNET_SHAPES
)

from .core.loading import MetisLoading
from .core.layers import MetisLayers
from .core.apd import MetisApd
from .core.apdgc import MetisApdgc
from .core.customdlg import CustomFileDialog

import os.path
import math


class MetisQgisApp:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MetisQgisApp_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MetisforQgis')
        self.version = 'v0.01.01'
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = True
        self.isloading = True

        self.project = QgsProject.instance()
        self.manager = self.project.layoutManager()

        self.settings = {
            'haslayers': False,
            'haspointstechnique': False,
            'layerpointstechnique': object,
        }

        self.nbenedis = 0
        self.nborange = 0
        self.nbvdlf = 0
        
        self.totalpages = 1
        self.haspointstechnique = False

        self.firstimeapdgc = True
        self.firstimeadoe = True

        # Dialogs
        self.dlg = None
        self.loading = None
        self.apdgc = None
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MetisQgisApp', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = os.path.join(self.plugin_dir, 'icon.png') # ':/plugins/metis_qgis_app/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Metis for Qgis'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MetisQgisApp'),
                action)
            self.iface.removeToolBarIcon(action)

    def print_to_console(self, title, msg):
        self.qmessage = QgsMessageBar()
        self.dlg.mainLayout.insertWidget(0, self.qmessage)
        self.qmessage.pushSuccess(str(title), str(msg))

    def load_styles_sig(self):
        layers = self.project.mapLayers().values()

        if not layers:
            pass
            # self.print_to_console('Aucune couche chargé.')

        for layer in layers:
            if layer.name() in GISNET_SHAPES:
                # self.print_to_console('Couche ' + str(layer.name()) + ' trouvée.')
                # layerstylepath = self.plugin_dir + '/styles/sig_gisnet/' + str(layer.name()) + '.qml'
                layerstylepath = os.path.join(self.plugin_dir, 'styles', 'sig_gisnet', str(layer.name()) + '.qml')
                layer.loadNamedStyle(layerstylepath)
                layer.triggerRepaint()
        

    def count_poles(self):
        """
            Count poles 
        """
        # cancount = False
        layers = self.project.mapLayersByName('pointstechnique')

        if len(layers) == 1:
            for shpfeature in layers[0].getFeatures():
                if shpfeature[5] == 'ENEDIS':
                    self.nbenedis += 1
                elif shpfeature[5] == 'ORANGE':
                    self.nborange += 1
                elif shpfeature[5] == 'VDLN' and shpfeature[10] == 'APPUI':
                    self.nbvdlf += 1


    


    def generate_apdgc_layout(self):
        """
            Generate the apdgc layout
        """
        
        fetcheddata = self.apdgc.prepare_apdgc_data()

        # Check if layout exists
        layouts = self.manager.layouts()
        for layout in layouts:
            if layout.name() == fetcheddata['project'] + '_DTPGC':
                # self.print_to_console(str(layout.name()))
                self.manager.removeLayout(layout)

        generatedlayout = self.apdgc.generate_apdgc_layout(
            self.project,
            fetcheddata,
            self.nbvdlf,
            self.iface,
        )
        self.manager.addLayout(generatedlayout)
        

    def show_apdgc(self):
        # self.apdgc.init_dlg(self.settings['layerpointstechnique'])
        if self.firstimeapdgc:
            self.apdgc.dlg.comboBoxPhase.addItem('APD')
            self.apdgc.dlg.comboBoxPhase.addItem('TRAVAUX')
            self.apdgc.dlg.comboBoxPhase.addItem('DOE')
            self.firstimeapdgc = False

        self.dlg.hide()
        self.apdgc.dlg.show()

    def hide_apdgc(self):
        self.apdgc.dlg.hide()
        self.dlg.show()
    

    def load_layer(self, dept):
        # parcellests = 'cadastre-37-parcelles-shp'
        # batimentsts = 'cadastre-37-parcelles-shp'
        # parcellesqu = 'cadastre-41-parcelles-shp'
        # parcellesqu = 'cadastre-41-parcelles-shp'

        layerspath = os.path.join(self.plugin_dir, 'layers')
        
        layerfoldbatnamecompil = 'cadastre-' + dept + '-batiments-shp'
        layerfoldparcnamecompil = 'cadastre-' + dept + '-parcelles-shp'

        layerbatnamecompil = 'batiments.shp'
        layerparcnamecompil = 'parcelles.shp'


        layerpathbatcompil = os.path.join(layerspath, layerfoldbatnamecompil, layerbatnamecompil)
        layerpathparccompil = os.path.join(layerspath, layerfoldparcnamecompil, layerparcnamecompil)

        vlayerbat = QgsVectorLayer(layerpathbatcompil, layerbatnamecompil, 'ogr')
        vlayerparc = QgsVectorLayer(layerpathparccompil, layerparcnamecompil, 'ogr')

        if not vlayerbat.isValid() and not vlayerparc.isValid():
            pass
        else:
            QgsProject.instance().addMapLayer(vlayerbat)
            QgsProject.instance().addMapLayer(vlayerparc)


    def check_if_has_layer(self, layer):
        layers = self.project.mapLayersByName(layer)

        # self.print_to_console(str(layers[0]))
        if layers:
            self.settings['haspointstechnique'] = True
            self.settings['layerpointstechnique'] = layers[0]
            self.dlg.pushButtonApdgc.setEnabled(True)
            self.dlg.pushButtonApdgc.disconnect()
            self.dlg.pushButtonApdgc.clicked.connect(self.show_apdgc)
            # self.apdgc.worker.update_entities_list(self.settings)
            self.apdgc.init_dlg(layers[0])

        else:
            self.settings['haspointstechnique'] = False
            self.settings['layerpointstechnique'] = None
            self.dlg.pushButtonApdgc.disconnect()
            self.dlg.pushButtonApdgc.clicked.connect(self.load_shp_from_filedlg)

    def show_doe(self):
        self.toogle_doe_frame('enedis')
        if self.firstimeadoe:
            # TODO
            self.firstimeadoe = False

        self.dlg.hide()
        self.dlgdoe.show()
        
    def hide_doe(self):
        self.dlgdoe.hide()
        self.dlg.show()

    def toogle_doe_frame(self, frame):
        if frame == 'enedis':
            self.dlgdoe.frameEnedis.show()
            self.dlgdoe.labelDoeTitle.setText('Metis - DOE Enedis')
            self.dlgdoe.frameOrange.hide()
        elif frame == 'orange':
            self.dlgdoe.frameEnedis.hide()
            self.dlgdoe.labelDoeTitle.setText('Metis - DOE Orange')
            self.dlgdoe.frameOrange.show()


    def generate_base_shape(self):
        """
            Generate base shapes for DOE Orange
        """
        pathtempshapes = os.path.join(self.plugin_dir, 'temp', 'shapes')


        bpelayer = QgsVectorLayer('Point?crs=IGNF:RGF93LAMB93', 'bpe' , 'memory')
        cablelayer = QgsVectorLayer('MultiLineString?crs=IGNF:RGF93LAMB93', 'cable' , 'memory')
        supportlayer = QgsVectorLayer('Point?crs=IGNF:RGF93LAMB93', 'support' , 'memory')

        geomfield = QgsField('geom', QVariant.String, 'String', 8192*2)
        operfield = QgsField('operateur', QVariant.String, 'String', 64)
        numsirenfield = QgsField('num_siren', QVariant.String, 'String', 64)
        refcomfield = QgsField('ref_comman', QVariant.String, 'String', 64)
        typefield = QgsField('type', QVariant.String, 'String', 64)

        # layerfields.append(QgsField('geom', QVariant.String))

        bpelayerprovider = bpelayer.dataProvider()
        bpelayerprovider.addAttributes([geomfield, operfield, numsirenfield, refcomfield, typefield])

        cablelayerprovider = cablelayer.dataProvider()
        cablelayerprovider.addAttributes([geomfield, operfield, numsirenfield, refcomfield])

        supportlayerprovider = supportlayer.dataProvider()
        supportlayerprovider.addAttributes([geomfield, operfield, numsirenfield, refcomfield, typefield])

        # tlayerfeat = QgsFeature()
        # tlayerfeat.setFields(layerfields)

        bpelayer.updateFields()
        cablelayer.updateFields()
        supportlayer.updateFields()

        # writer = QgsVectorFileWriter(os.path.join(pathtempshapes, 'bpe.shp'), 'UTF-8', layerfields, QgsWkbTypes.Point, QgsCoordinateReferenceSystem('EPSG:4171'), 'ESRI Shapefile')
        # tlayer = QgsVectorLayer()


        # Populate layers
        layerpitft = self.project.mapLayersByName('pointstechnique')
        layerpitcable = self.project.mapLayersByName('cable')

        if layerpitcable:
            id = 0
            cablelayer.startEditing()
            for shpfeature in layerpitcable[0].getFeatures():
                newfeatcable = QgsFeature()
                newfeatcable.setGeometry(shpfeature.geometry())
                newfeatcable.setId(id)

                coordinates = json.loads(shpfeature.geometry().asJson())['coordinates']
                geomfielddata = 'LINESTRING '

                for coord in coordinates[0]:
                    # self.print_to_console(str(coord))
                    geomfielddata += str(coord[0]) + ' ' + str(coord[1]) + ' '

                cablelayerprovider.addFeature(newfeatcable)
                newfeatcable[0] = geomfielddata
                newfeatcable[1] = 'TDF'
                newfeatcable[2] = '309633105'
                newfeatcable[3] = 'F00000jjmmaa'

                cablelayer.updateFeature(newfeatcable)
                id += 1
            
            cablelayer.commitChanges()
            self.project.addMapLayer(cablelayer)
                
        if layerpitft:
            id = 0
            supportlayer.startEditing()
            bpelayer.startEditing()
            for shpfeature in layerpitft[0].getFeatures():
                newfeatsupport = QgsFeature()
                newfeatsupport.setGeometry(shpfeature.geometry())
                newfeatsupport.setId(id)

                coordinates = json.loads(shpfeature.geometry().asJson())['coordinates']
                geomfielddata = 'POINT ' + str(coordinates[0]) + ' ' + str(coordinates[1])

                supportlayerprovider.addFeature(newfeatsupport)
                newfeatsupport[0] = geomfielddata
                newfeatsupport[1] = 'ORANGE'
                newfeatsupport[2] = '309633105'
                newfeatsupport[3] = 'F00000jjmmaa'
                newfeatsupport[4] = 'FT_APPUI'
                
                newfeatbpe = QgsFeature()
                newfeatbpe.setGeometry(shpfeature.geometry())
                newfeatbpe.setId(id)

                bpelayerprovider.addFeature(newfeatbpe)
                newfeatbpe[0] = geomfielddata
                newfeatbpe[1] = 'TDF'
                newfeatbpe[2] = '309633105'
                newfeatbpe[3] = 'F00000jjmmaa'
                newfeatbpe[4] = 'PEO'


                supportlayer.updateFeature(newfeatsupport)
                bpelayer.updateFeature(newfeatbpe)
                id += 1

            supportlayer.commitChanges()
            bpelayer.commitChanges()

        self.project.addMapLayer(bpelayer)
        self.project.addMapLayer(supportlayer)

    def generate_gcor_shape(self):
        # TODO
        pass

    
    def show_menu(self):
        self.loading.dlg.hide()
        self.isloading = False
        self.dlg.show()

    def show_layers(self):
        self.layers.run()

    def show_apd(self):
        self.dlg.hide()
        self.apd.run()

    def setting_changed(self, settings):
        # check if exists already

        for key, value in settings.items():
            self.settings[key] = value
    
    def load_shp_from_filedlg(self):
        self.dlgfileex = CustomFileDialog()
        files = self.dlgfileex.run()
        self.print_to_console('Chargement shape', files)

        if 'pointstechnique.shp' in files[0]:
            vlayerloaded = QgsVectorLayer(files[0], 'pointstechnique', 'ogr')

        self.project.addMapLayer(vlayerloaded)

    def load_dialogs(self):
        """
            APD GC Dialog
        """
        self.apdgc = MetisApdgc(self.settings, self.plugin_dir, os.path.join(self.plugin_dir, 'styles', 'layout'))
        # self.dlg.pushButtonApdgc.clicked.connect(self.show_apdgc)
        self.apdgc.dlg.pushButtonCancel.clicked.connect(self.hide_apdgc)
        self.apdgc.dlg.pushButtonGenerateLayoutFull.clicked.connect(self.generate_apdgc_layout)

        if not self.settings['haspointstechnique']:
            # self.dlg.pushButtonApdgc.setEnabled(False)
            self.dlg.pushButtonApdgc.clicked.connect(self.load_shp_from_filedlg)
        
        else:
            self.apdgc.init_dlg(self.settings['layerpointstechnique'])
            self.apdgc.worker.update_entities_list(self.settings)
            self.dlg.pushButtonApdgc.clicked.connect(self.show_apdgc)
        
        self.print_to_console('Test', 'loaded ended')

    def handle_layers_removed(self):
        layers = self.project.mapLayers()

        if not self.settings['haspointstechnique']:
            return
        
        else:
            for layer in layers:
                if layer.layerName() == self.settings['layerpointstechnique']:
                    self.settings['layerpointstechnique'] = object
                    self.settings['haspointstechnique'] = False

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True and self.isloading:
            self.first_start = False

            self.dlg = MetisQgisAppDialog()

            pathicons = os.path.join(self.plugin_dir, 'images', 'icons')

            icoapdgc = QPixmap(os.path.join(pathicons, 'apdgc.png'))
            icoapd = QPixmap(os.path.join(pathicons, 'apd.png'))
            icoaps = QPixmap(os.path.join(pathicons, 'aps.png'))
            icotrvx = QPixmap(os.path.join(pathicons, 'travaux.png'))
            icodoe = QPixmap(os.path.join(pathicons, 'doe.png'))
            icosettings = QPixmap(os.path.join(pathicons, 'settings.png'))

    
            icon = QIcon()
            icon.addPixmap(icoapdgc)
            self.dlg.pushButtonApdgc.setIconSize(QSize(32, 32))
            self.dlg.pushButtonApdgc.setIcon(icon)


            icon = QIcon()
            icon.addPixmap(icoapd)
            self.dlg.pushButtonApd.setIconSize(QSize(32, 32))
            self.dlg.pushButtonApd.setIcon(icon)

            icon = QIcon()
            icon.addPixmap(icoaps)
            self.dlg.pushButtonAps.setIconSize(QSize(32, 32))
            self.dlg.pushButtonAps.setIcon(icon)

            icon = QIcon()
            icon.addPixmap(icotrvx)
            self.dlg.pushButtonTrvx.setIconSize(QSize(32, 32))
            self.dlg.pushButtonTrvx.setIcon(icon)

            icon = QIcon()
            icon.addPixmap(icodoe)
            self.dlg.pushButtonDoe.setIconSize(QSize(32, 32))
            self.dlg.pushButtonDoe.setIcon(icon)

            icon = QIcon()
            icon.addPixmap(icosettings)
            self.dlg.pushButtonCfg.setIconSize(QSize(32, 32))
            self.dlg.pushButtonCfg.setIcon(icon)

            self.dlg.labelVersion.setText(VERSION)

            # Boot procedure
            self.loading = MetisLoading(self.project, self.plugin_dir, VERSION)
            self.loading.thread.finished.connect(self.show_menu)
            self.loading.worker.progressmsg.connect(lambda progressmsg: self.loading.dlg.labelProgress.setText(progressmsg))
            self.loading.worker.settingchanged.connect(lambda settings: self.setting_changed(settings))
            self.loading.worker.finished.connect(self.load_dialogs)
            

            # Else
            self.layers = MetisLayers()
            self.apd = MetisApd()
            self.dlg.setLayout(self.dlg.mainLayout)

            
            msg = QgsMessageBar()
            msg.pushMessage('Boot', 'Boot was ok')
          
            

            # self.print_to_console("Metis for Qgis")
            # self.print_to_console("Boot was a success.")

            self.dlg.quitButton.clicked.connect(self.dlg.hide)
            self.dlg.loadStylesButton.clicked.connect(self.load_styles_sig)

            # self.dlg.apdgcButton.clicked.connect(self.generate_apdgc_layout)

            
            
            
            """
                APD DIALOG
            """
            self.dlg.pushButtonApd.clicked.connect(self.show_apd)
            
            """
                LAYERS DIALOG
            """
            self.dlg.pushButtonLoadLayers.clicked.connect(self.show_layers)
            self.layers.dlg.pushButtonCadTS.clicked.connect(lambda: self.load_layer('37'))
          

            """
                DOE DIALOG
            """
            self.dlgdoe = MetisQgisDoeDialog()
            self.dlgdoe.setLayout(self.dlgdoe.verticalLayout)
            self.dlgdoe.frameEnedis.setLayout(self.dlgdoe.layoutFrameEnedis)
            self.dlgdoe.frameOrange.setLayout(self.dlgdoe.layoutFrameOrange)
            self.dlgdoe.frameOrange.hide()
            self.dlg.pushButtonDoe.clicked.connect(self.show_doe)
            self.dlgdoe.pushButtonCancel.clicked.connect(self.hide_doe)
            self.dlgdoe.pushButtonEnedis.clicked.connect(lambda: self.toogle_doe_frame('enedis'))
            self.dlgdoe.pushButtonOrange.clicked.connect(lambda: self.toogle_doe_frame('orange'))
            self.dlgdoe.pushButtonShapeBase.clicked.connect(lambda: self.generate_base_shape())
            # populate layer combo box
            layers = self.project.mapLayers().items()

            for layer in layers:
                if layer[1].name() == 'FT_Appui' or layer[1].name() == 'FT_cableAerien':
                    self.dlgdoe.comboBoxOrangeLayers.addItem(layer[1].name())

            self.count_poles()
            self.project.layersAdded.connect(lambda: self.check_if_has_layer('pointstechnique'))
            self.project.layersRemoved.connect(self.handle_layers_removed)
            # Start loading
            self.loading.run()

        elif not self.isloading:
            self.dlg.show()

